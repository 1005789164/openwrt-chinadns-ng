#!/bin/sh /etc/rc.common


START=99
NAME=chinadns-ng
USE_PROCD=1
SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1
CHINADNS_CONF_DIR="/etc/$NAME"
RESPAWN="1"

ip_same()
{
	local IP=$1
	local IP2=$2
	
	local temp="$(ifconfig | grep "inet addr" | grep -v ":127" | grep "Bcast" | awk '{print $2}' | awk -F : '{print $2}' | tr '\n' ' ')"
	local sample="0.0.0.0 127.0.0.1 $temp"
	[ "$IP" != "$IP2" ] && [ -z "$(echo "$sample" | grep "$IP")" -a -z "$(echo "$sample" | grep "$IP2")" ] && echo 1
	echo 0
}

valid_ipv6()
{
	local IP_EXPR="^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$"

	if [ -n "$(echo "$1" | grep -E "$IP_EXPR")" ]; then
		echo "1"
	else
		echo "0"
	fi
}

valid_ipv4()
{
	local IP_EXPR="^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$"

	if [ -n "$(echo "$1" | grep -E "$IP_EXPR")" ]; then
		echo "1"
	else
		echo "0"
	fi
}

set_forward_dnsmasq()
{
	local PORT="$1"
	local addr
	[ "$2" = "0.0.0.0" ] && addr="127.0.0.1#$PORT" || addr="$2#$PORT"
	local OLD_SERVER="$(uci get dhcp.@dnsmasq[0].server 2>/dev/null)"
	if echo "$OLD_SERVER" | grep "$addr" >/dev/null 2>&1; then
		return
	fi

	uci add_list dhcp.@dnsmasq[0].server="$addr"
	uci set dhcp.@dnsmasq[0].noresolv=1
	if [ "$2" = "1" ]; then
		uci commit dhcp
		/etc/init.d/dnsmasq restart
	fi
}

stop_forward_dnsmasq()
{
	local OLD_PORT="$1"
	local addr
	[ "$2" = "0.0.0.0" ] && addr="127.0.0.1#$OLD_PORT" || addr="$2#$OLD_PORT"
	local OLD_SERVER="$(uci get dhcp.@dnsmasq[0].server 2>/dev/null)"
	if ! echo "$OLD_SERVER" | grep "$addr" >/dev/null 2>&1; then
		return
	fi

	uci del_list dhcp.@dnsmasq[0].server="$addr" 2>/dev/null
	local addrlist="$(uci get dhcp.@dnsmasq[0].server 2>/dev/null)"
	[ -z "$addrlist" ] && {
		uci delete dhcp.@dnsmasq[0].noresolv 2>/dev/null
	}
	if [ "$2" = "1" ]; then
		uci commit dhcp
		/etc/init.d/dnsmasq restart
	fi
}

set_iptable()
{
	local IP=$1
	local SMARTDNS_PORT=$2
	local tcp_server=$3
	local ipv6_server="$(valid_ipv6 $IP)"

	if [ "$ipv6_server" != "1" ]; then
		if [ "$tcp_server" = "1" ]; then
			iptables -t nat -A PREROUTING -p tcp -d "$IP" --dport 53 -j REDIRECT --to-ports "$SMARTDNS_PORT" >/dev/null 2>&1
		fi
		iptables -t nat -A PREROUTING -p udp -d "$IP" --dport 53 -j REDIRECT --to-ports "$SMARTDNS_PORT" >/dev/null 2>&1
	else
		if [ "$tcp_server" = "1" ]; then
			ip6tables -t nat -A PREROUTING -p tcp -d "$IP" --dport 53 -j REDIRECT --to-ports "$SMARTDNS_PORT" >/dev/null 2>&1
		fi
		ip6tables -t nat -A PREROUTING -p udp -d "$IP" --dport 53 -j REDIRECT --to-ports "$SMARTDNS_PORT" >/dev/null 2>&1
	fi
}

clear_iptable()
{
	local IP=$1
	local OLD_PORT=$2
	local tcp_server=$3
	local ipv6_server="$(valid_ipv6 $IP)"

	if [ "$ipv6_server" != "1" ]; then
		if [ "$tcp_server" = "1" ]; then
			iptables -t nat -D PREROUTING -p tcp -d "$IP" --dport 53 -j REDIRECT --to-ports "$OLD_PORT" >/dev/null 2>&1
		fi
		iptables -t nat -D PREROUTING -p udp -d "$IP" --dport 53 -j REDIRECT --to-ports "$OLD_PORT" >/dev/null 2>&1
	else
		if [ "$tcp_server" = "1" ]; then
			ip6tables -t nat -D PREROUTING -p tcp -d "$IP" --dport 53 -j REDIRECT --to-ports "$OLD_PORT" >/dev/null 2>&1
		fi
		ip6tables -t nat -D PREROUTING -p udp -d "$IP" --dport 53 -j REDIRECT --to-ports "$OLD_PORT" >/dev/null 2>&1
	fi
}



get_tz()
{
	SET_TZ=""

	[ -e "/etc/localtime" ] && return

	for tzfile in /etc/TZ /var/etc/TZ
	do
		[ -e "$tzfile" ] || continue
		tz="$(cat $tzfile 2>/dev/null)"
	done

	[ -z "$tz" ] && return

	SET_TZ=$tz
}

load_service()
{
	local section="$1"
	local isdnsmasq_reboot=0

	config_get_bool enable "$section" "enable" '0'
	config_get addr "$section" "addr" "0.0.0.0"
	config_get port "$section" "port" "65353"
	config_get redirect "$section" "redirect" "none"

	config_get old_redirect "$section" "old_redirect" "none"
	config_get old_port "$section" "old_port" "0"
	config_get old_addr "$section" "old_addr" "0.0.0.0"
	config_get old_enable "$section" "old_enable" "0"

	if [ "$old_redirect" != "$redirect" ] || [ "$old_port" != "$port" ] || [ "$old_enable" = "1" -a "$enable" = "0" ] || [ "$old_enable" = "$enable" -a "$enable" = "1" ]; then
		[ "$old_redirect" = "none" ] || {
			[ "$old_redirect" = "redirect" ] && clear_iptable "$old_addr" "$old_port" "0"
			[ "$old_redirect" = "dnsmasq-upstream" ] && stop_forward_dnsmasq "$old_port" "$old_addr" "0" && isdnsmasq_reboot=`expr $isdnsmasq_reboot + 1`
		}
	fi
	
	
	config_get_bool s_enable "$section" "s_enable" '0'
	config_get s_addr "$section" "s_addr" "0.0.0.0"
	config_get s_port "$section" "s_port" "63535"
	if [ "$s_port" = "$port" ]; then
		if [ "`ip_same $s_addr $addr`" = "1" ]; then
			[ "s_port" -ge "65535" ] && s_port=`expr $s_port - 1` || s_port=`expr $s_port + 1`
			uci set $NAME.@chinadns[0].s_port=$s_port
		fi
	fi
	config_get s_redirect "$section" "s_redirect" "none"
	if [ "$redirect" = "redirect" ]; then
		s_redirect="none"
		uci set $NAME.@chinadns[0].s_redirect=$s_redirect
	fi

	config_get old_s_redirect "$section" "old_s_redirect" "none"
	config_get old_s_port "$section" "old_s_port" "0"
	config_get old_s_addr "$section" "old_s_addr" "0.0.0.0"
	config_get old_s_enable "$section" "old_s_enable" "0"

	if [ "$old_s_redirect" != "$s_redirect" ] || [ "$old_s_port" != "$s_port" ] || [ "$old_s_enable" = "1" -a "$s_enable" = "0" ] || [ "$old_s_enable" = "$s_enable" -a "$s_enable" = "1" ]; then
		[ "$old_s_redirect" = "none" ] || {
			[ "$old_s_redirect" = "redirect" ] && clear_iptable "$old_s_addr" "$old_s_port" "0"
			[ "$old_s_redirect" = "dnsmasq-upstream" ] && stop_forward_dnsmasq "$old_s_port" "$old_s_addr" "0" && isdnsmasq_reboot=`expr $isdnsmasq_reboot + 1`
		}
	fi

	uci delete $NAME.@chinadns[0].old_redirect 2>/dev/null
	uci delete $NAME.@chinadns[0].old_port 2>/dev/null
	uci delete $NAME.@chinadns[0].old_addr 2>/dev/null
	uci delete $NAME.@chinadns[0].old_enable 2>/dev/null
	uci add_list $NAME.@chinadns[0].old_redirect="$redirect" 2>/dev/null
	uci add_list $NAME.@chinadns[0].old_port="$port" 2>/dev/null
	uci add_list $NAME.@chinadns[0].old_addr="$addr" 2>/dev/null
	uci add_list $NAME.@chinadns[0].old_enable="$enable" 2>/dev/null
	
	
	uci delete $NAME.@chinadns[0].old_s_redirect 2>/dev/null
	uci delete $NAME.@chinadns[0].old_s_port 2>/dev/null
	uci delete $NAME.@chinadns[0].old_s_addr 2>/dev/null
	uci delete $NAME.@chinadns[0].old_s_enable 2>/dev/null
	uci add_list $NAME.@chinadns[0].old_s_redirect="$s_redirect" 2>/dev/null
	uci add_list $NAME.@chinadns[0].old_s_port="$s_port" 2>/dev/null
	uci add_list $NAME.@chinadns[0].old_s_addr="$s_addr" 2>/dev/null
	uci add_list $NAME.@chinadns[0].old_s_enable="$s_enable" 2>/dev/null
	uci commit $NAME

	get_tz
	if [ "$enable" -gt 0 ]; then
		if [ "$redirect" = "redirect" ]; then
			set_iptable $addr $port "0"
		elif [ "$redirect" = "dnsmasq-upstream" ]; then
			set_forward_dnsmasq "$port" "$addr" "0" && isdnsmasq_reboot=`expr $isdnsmasq_reboot + 1`
		fi

		procd_open_instance $NAME
		[ -z "$SET_TZ" ] || procd_set_param env TZ="$SET_TZ"
		config_get execpara "$section" "execpara" ""
		procd_set_param command /usr/bin/chinadns-ng -b $addr -l $port $execpara
		[ "$RESPAWN" = "1" ] &&	procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
		procd_close_instance
	fi
	
	
	if [ "$s_enable" -gt 0 ]; then
		if [ "$s_redirect" = "redirect" ]; then
			set_iptable $s_addr $s_port "0"
		elif [ "$s_redirect" = "dnsmasq-upstream" ]; then
			set_forward_dnsmasq "$s_port" "$s_addr" "0" && isdnsmasq_reboot=`expr $isdnsmasq_reboot + 1`
		fi

		procd_open_instance "$NAME"2
		[ -z "$SET_TZ" ] || procd_set_param env TZ="$SET_TZ"
		config_get s_execpara "$section" "s_execpara" ""
		procd_set_param command /usr/bin/chinadns-ng -b $s_addr -l $s_port $s_execpara
		[ "$RESPAWN" = "1" ] &&	procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
		procd_close_instance
	fi
	
	[ $isdnsmasq_reboot -gt 0 ] && uci commit dhcp && /etc/init.d/dnsmasq restart
}

start_service()
{
	config_load $NAME
	config_foreach load_service "chinadns"
}

stop_service()
{
	killall chinadns-ng 2>/dev/null
}

reload_service()
{
	stop
	start
}

service_triggers()
{
	procd_add_reload_trigger $NAME
}
